{"version":3,"file":"static/webpack/static/development/pages/_app.js.799c9c47b8869726bb72.hot-update.js","sources":["webpack:///./components/SnippetControls/SnippetControls.tsx"],"sourcesContent":["import { Button, Flex, Small } from '@bigcommerce/big-design';\nimport { AssignmentIcon, CheckIcon, InvertColorsIcon, RestoreIcon } from '@bigcommerce/big-design-icons';\nimport React, { useContext, useState } from 'react';\n\nimport { JavascriptIcon } from '../Icons/JavascriptIcon';\nimport { CodeEditorContext } from '../StoryWrapper/StoryWrapper';\n\nimport { StyledFlex } from './styled';\n\ninterface SnippetControls {\n  helperText?: string;\n  copyToClipboard(): void;\n  resetCode?(): void;\n}\n\nfunction getCopyToClipboardIcon(isCopying: boolean) {\n  return isCopying ? (\n    <CheckIcon title=\"Copying\" color=\"success\" />\n  ) : (\n    <AssignmentIcon title=\"Copy\" color=\"secondary60\" />\n  );\n}\n\nfunction onCopy(setIsCopying: (copying: boolean) => void, copyToClipboard: () => void) {\n  setIsCopying(true);\n  copyToClipboard();\n\n  setTimeout(() => {\n    setIsCopying(false);\n  }, 1000);\n}\n\nexport const SnippetControls: React.FC<SnippetControls> = props => {\n  const { copyToClipboard, helperText, resetCode } = props;\n  const [isCopying, setIsCopying] = useState(false);\n  const { toggleTheme: toggleEditorTheme } = useContext(CodeEditorContext);\n\n  return (\n    <StyledFlex\n      borderBottom=\"box\"\n      backgroundColor=\"secondary20\"\n      justifyContent=\"flex-end\"\n      alignItems=\"center\"\n      style={{ zIndex: 999 }}\n    >\n      <Flex.Item flexGrow={1}>\n        <Small marginHorizontal=\"small\">{helperText}</Small>\n      </Flex.Item>\n\n      <Flex.Item borderLeft=\"box\">\n        <Button\n          iconOnly={<TypescriptIcon />}\n          variant=\"subtle\"\n          onClick={() => onCopy(setIsCopying, copyToClipboard)}\n        />\n      </Flex.Item>\n\n      <Flex.Item borderLeft=\"box\">\n        <Button\n          iconOnly={<JavascriptIcon />}\n          variant=\"subtle\"\n          onClick={() => onCopy(setIsCopying, copyToClipboard)}\n        />\n      </Flex.Item>\n\n      <Flex.Item borderLeft=\"box\">\n        <Button\n          iconOnly={getCopyToClipboardIcon(isCopying)}\n          variant=\"subtle\"\n          onClick={() => onCopy(setIsCopying, copyToClipboard)}\n          disabled={isCopying}\n        />\n      </Flex.Item>\n      {resetCode && (\n        <Flex.Item borderLeft=\"box\">\n          <Button iconOnly={<RestoreIcon title=\"Reset\" color=\"secondary60\" />} variant=\"subtle\" onClick={resetCode} />\n        </Flex.Item>\n      )}\n      <Flex.Item borderLeft=\"box\">\n        <Button\n          iconOnly={<InvertColorsIcon title=\"Toggle Theme\" color=\"secondary60\" />}\n          variant=\"subtle\"\n          onClick={toggleEditorTheme}\n        />\n      </Flex.Item>\n    </StyledFlex>\n  );\n};\n\nSnippetControls.defaultProps = {\n  helperText: 'Edit the code below to see your changes live!',\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAOA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAEA;AACA;AADA;;;;A","sourceRoot":""}