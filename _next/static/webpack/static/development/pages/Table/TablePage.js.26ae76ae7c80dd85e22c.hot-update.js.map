{"version":3,"file":"static/webpack/static/development/pages/Table/TablePage.js.26ae76ae7c80dd85e22c.hot-update.js","sources":["webpack:///./components/CodePreview/CodePreview.tsx"],"sourcesContent":["import { transform } from '@babel/standalone';\nimport * as BigDesign from '@bigcommerce/big-design';\nimport * as BigDesignIcons from '@bigcommerce/big-design-icons';\nimport clipboardCopy from 'clipboard-copy';\nimport parser from 'prettier/parser-babylon';\nimport prettier from 'prettier/standalone';\nimport React, { useContext, useState } from 'react';\nimport { LiveEditor, LivePreview, LiveProvider } from 'react-live';\nimport styled from 'styled-components';\n\nimport { SnippetControls } from '../SnippetControls';\nimport { CodeEditorContext, Language } from '../StoryWrapper/StoryWrapper';\n\nimport { StyledLiveError } from './styled';\n\nconst defaultScope = {\n  ...BigDesign,\n  ...BigDesignIcons,\n  React,\n  styled,\n};\n\nfunction getInitialCode(children: React.ReactNode, language: Language): string {\n  if (typeof children !== 'string') {\n    throw new Error('<CodePreview> children must be of type string');\n  }\n\n  if (language !== 'jsx') {\n    return children;\n  }\n\n  const code = transform(children, {\n    compact: false,\n    retainLines: true,\n    presets: [['typescript', { allExtensions: true, isTSX: true, jsxPragma: 'preserve' }]],\n  }).code;\n\n  return prettier.format(code, { parser: 'babel', plugins: [parser] });\n}\n\nfunction transformCode(input: string): string {\n  try {\n    return transform(input, {\n      presets: [['typescript', { allExtensions: true, isTSX: true }], 'react'],\n    }).code;\n  } catch (e) {\n    return input;\n  }\n}\n\nexport interface CodePreviewProps {\n  scope?: { [key: string]: any };\n}\n\nexport const CodePreview: React.FC<CodePreviewProps> = props => {\n  const { children } = props;\n  const { theme: editorTheme, language } = useContext(CodeEditorContext);\n\n  const initialCode = getInitialCode(children, language);\n  const [code, setCode] = useState(initialCode);\n  const scope = { ...defaultScope, ...props.scope };\n\n  return (\n    <BigDesign.Box border=\"box\" marginBottom=\"xxLarge\">\n      <LiveProvider code={code} scope={scope} theme={editorTheme} language={language} transformCode={transformCode}>\n        <BigDesign.Box padding=\"medium\" backgroundColor=\"white\" borderBottom=\"box\">\n          <LivePreview />\n        </BigDesign.Box>\n        <SnippetControls copyToClipboard={() => clipboardCopy(code)} resetCode={() => setCode(initialCode)} />\n        <LiveEditor onChange={setCode} />\n        <StyledLiveError />\n      </LiveProvider>\n    </BigDesign.Box>\n  );\n};\n\nCodePreview.defaultProps = {\n  scope: defaultScope,\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAGA;AACA;AAJA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAHA;AAMA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AADA;AAGA;AACA;AACA;AACA;AACA;AAKA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAGA;AACA;AALA;AAAA;AAAA;AAAA;AACA;AAKA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAEA;AACA;AADA;;;;A","sourceRoot":""}