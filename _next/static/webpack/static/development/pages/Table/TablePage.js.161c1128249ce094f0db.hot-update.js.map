{"version":3,"file":"static/webpack/static/development/pages/Table/TablePage.js.161c1128249ce094f0db.hot-update.js","sources":["webpack:///./components/CodePreview/CodePreview.tsx","webpack:///./components/CodeSnippet/CodeSnippet.tsx","webpack:///./components/SnippetControls/SnippetControls.tsx","webpack:///./components/StoryWrapper/StoryWrapper.tsx","webpack:///./components/StoryWrapper/index.tsx","webpack:///./components/index.tsx"],"sourcesContent":["import { transform } from '@babel/standalone';\nimport * as BigDesign from '@bigcommerce/big-design';\nimport * as BigDesignIcons from '@bigcommerce/big-design-icons';\nimport clipboardCopy from 'clipboard-copy';\nimport parser from 'prettier/parser-babylon';\nimport prettier from 'prettier/standalone';\nimport { Language } from 'prism-react-renderer';\nimport React, { useContext, useState } from 'react';\nimport { LiveEditor, LivePreview, LiveProvider } from 'react-live';\nimport styled from 'styled-components';\n\nimport { SnippetControls } from '../SnippetControls';\nimport { CodeEditorContext } from '../StoryWrapper/StoryWrapper';\n\nimport { StyledLiveError } from './styled';\n\nconst defaultScope = {\n  ...BigDesign,\n  ...BigDesignIcons,\n  React,\n  styled,\n};\n\nfunction getInitialCode(children: React.ReactNode): string {\n  if (typeof children !== 'string') {\n    throw new Error('<CodePreview> children must be of type string');\n  }\n\n  const code = transform(children, {\n    compact: false,\n    retainLines: true,\n    presets: [['typescript', { allExtensions: true, isTSX: true, jsxPragma: 'preserve' }]],\n  }).code;\n\n  return prettier.format(code, { parser: 'babel', plugins: [parser] });\n}\n\nfunction transformCode(input: string): string {\n  try {\n    return transform(input, {\n      presets: [['typescript', { allExtensions: true, isTSX: true }], 'react'],\n    }).code;\n  } catch (e) {\n    return input;\n  }\n}\n\nexport interface CodePreviewProps {\n  scope?: { [key: string]: any };\n  language?: Language;\n}\n\nexport const CodePreview: React.FC<CodePreviewProps> = props => {\n  const { children, language } = props;\n  const initialCode = getInitialCode(children);\n  const [code, setCode] = useState(initialCode);\n  const { theme: editorTheme } = useContext(CodeEditorContext);\n  const scope = { ...defaultScope, ...props.scope };\n\n  return (\n    <BigDesign.Box border=\"box\" marginBottom=\"xxLarge\">\n      <LiveProvider code={code} scope={scope} theme={editorTheme} language={language} transformCode={transformCode}>\n        <BigDesign.Box padding=\"medium\" backgroundColor=\"white\" borderBottom=\"box\">\n          <LivePreview />\n        </BigDesign.Box>\n        <SnippetControls copyToClipboard={() => clipboardCopy(code)} resetCode={() => setCode(initialCode)} />\n        <LiveEditor onChange={setCode} />\n        <StyledLiveError />\n      </LiveProvider>\n    </BigDesign.Box>\n  );\n};\n\nCodePreview.defaultProps = {\n  language: 'tsx',\n  scope: defaultScope,\n};\n","import { Box } from '@bigcommerce/big-design';\nimport clipboardCopy from 'clipboard-copy';\nimport { Language } from 'prism-react-renderer';\nimport React, { useContext } from 'react';\nimport { Editor } from 'react-live';\n\nimport { SnippetControls } from '../SnippetControls';\nimport { CodeEditorContext } from '../StoryWrapper/StoryWrapper';\n\ninterface EditorProps {\n  language?: Language;\n  showControls?: boolean;\n}\n\nfunction formatCode(code: string) {\n  const lines = code.split('\\n');\n\n  // Remove first line if empty (multiline)\n  if (lines[0].trim() === '') {\n    lines.splice(0, 1);\n  }\n\n  // Remove last line if empty (multiline)\n  if (lines[lines.length - 1].trim() === '') {\n    lines.pop();\n  }\n\n  // Number of whitespaces to remove from each line\n  const padding = lines[0].search(/\\S|$/);\n\n  return lines.map(line => line.substr(padding)).join('\\n');\n}\n\nfunction getCode(children: React.ReactNode) {\n  if (typeof children !== 'string') {\n    throw new Error('<CodeSnippet> children must be of type string');\n  }\n\n  return formatCode(children);\n}\n\nexport const CodeSnippet: React.FC<EditorProps> = props => {\n  const { children, language, showControls } = props;\n  const { theme: editorTheme } = useContext(CodeEditorContext);\n  const code = getCode(children);\n\n  return (\n    <Box border=\"box\" marginBottom=\"xxLarge\">\n      {showControls && <SnippetControls copyToClipboard={() => clipboardCopy(code)} helperText=\"Code example\" />}\n\n      <Editor code={code} theme={editorTheme} language={language} disabled />\n    </Box>\n  );\n};\n\nCodeSnippet.defaultProps = {\n  language: 'jsx',\n  showControls: true,\n};\n","import { Button, Flex, Small } from '@bigcommerce/big-design';\nimport { AssignmentIcon, CheckIcon, InvertColorsIcon, RestoreIcon } from '@bigcommerce/big-design-icons';\nimport React, { useContext, useState } from 'react';\n\nimport { CodeEditorContext } from '../StoryWrapper/StoryWrapper';\n\nimport { StyledFlex } from './styled';\n\ninterface SnippetControls {\n  helperText?: string;\n  copyToClipboard(): void;\n  resetCode?(): void;\n}\n\nfunction getCopyToClipboardIcon(isCopying: boolean) {\n  return isCopying ? (\n    <CheckIcon title=\"Copying\" color=\"success\" />\n  ) : (\n    <AssignmentIcon title=\"Copy\" color=\"secondary60\" />\n  );\n}\n\nfunction onCopy(setIsCopying: (copying: boolean) => void, copyToClipboard: () => void) {\n  setIsCopying(true);\n  copyToClipboard();\n\n  setTimeout(() => {\n    setIsCopying(false);\n  }, 1000);\n}\n\nexport const SnippetControls: React.FC<SnippetControls> = props => {\n  const { copyToClipboard, helperText, resetCode } = props;\n  const [isCopying, setIsCopying] = useState(false);\n  const { toggleTheme: toggleEditorTheme } = useContext(CodeEditorContext);\n\n  return (\n    <StyledFlex\n      borderBottom=\"box\"\n      backgroundColor=\"secondary20\"\n      justifyContent=\"flex-end\"\n      alignItems=\"center\"\n      style={{ zIndex: 999 }}\n    >\n      <Flex.Item flexGrow={1}>\n        <Small marginHorizontal=\"small\">{helperText}</Small>\n      </Flex.Item>\n      <Flex.Item borderLeft=\"box\">\n        <Button\n          iconOnly={getCopyToClipboardIcon(isCopying)}\n          variant=\"subtle\"\n          onClick={() => onCopy(setIsCopying, copyToClipboard)}\n          disabled={isCopying}\n        />\n      </Flex.Item>\n      {resetCode && (\n        <Flex.Item borderLeft=\"box\">\n          <Button iconOnly={<RestoreIcon title=\"Reset\" color=\"secondary60\" />} variant=\"subtle\" onClick={resetCode} />\n        </Flex.Item>\n      )}\n      <Flex.Item borderLeft=\"box\">\n        <Button\n          iconOnly={<InvertColorsIcon title=\"Toggle Theme\" color=\"secondary60\" />}\n          variant=\"subtle\"\n          onClick={toggleEditorTheme}\n        />\n      </Flex.Item>\n    </StyledFlex>\n  );\n};\n\nSnippetControls.defaultProps = {\n  helperText: 'Edit the code below to see your changes live!',\n};\n","import { Panel } from '@bigcommerce/big-design';\nimport { PrismTheme } from 'prism-react-renderer';\nimport { default as lightTheme } from 'prism-react-renderer/themes/github';\nimport { default as darkTheme } from 'prism-react-renderer/themes/oceanicNext';\nimport React, { createContext, useState } from 'react';\n\ninterface Context {\n  theme: PrismTheme;\n  // language: ''\n  toggleTheme(): void;\n}\n\nexport const CodeEditorContext = createContext<Context>({\n  editorLanguage: 'tsx',\n  theme: darkTheme,\n  // tslint:disable-next-line: no-empty\n  toggleTheme: () => {},\n});\n\nexport const StoryWrapper: React.FC = props => {\n  const [editorTheme, setEditorTheme] = useState(darkTheme);\n  const toggleEditorTheme = () => setEditorTheme(editorTheme === darkTheme ? lightTheme : darkTheme);\n\n  return (\n    <Panel>\n      <CodeEditorContext.Provider value={{ theme: editorTheme, toggleTheme: toggleEditorTheme }}>\n        {props.children}\n      </CodeEditorContext.Provider>\n    </Panel>\n  );\n};\n","export * from './StoryWrapper';\n","export * from './BetaRibbon';\nexport * from './Code';\nexport * from './CodePreview';\nexport * from './CodeSnippet';\nexport * from './Collapsible';\nexport * from './List';\nexport * from './NextLink';\nexport * from './PropTable';\nexport * from './SideNav';\nexport * from './StoryWrapper';\n"],"mappings":"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","sourceRoot":""}